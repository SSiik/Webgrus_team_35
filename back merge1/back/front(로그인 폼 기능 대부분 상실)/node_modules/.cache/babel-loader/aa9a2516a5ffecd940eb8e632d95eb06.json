{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\uC774\\uC885\\uD601\\\\Pictures\\\\Desktop\\\\web back\\\\forum\\\\forum-front\\\\src\\\\LoginForm.js\";\nimport React, { Component } from \"react\";\nimport { Form, Button } from \"react-bootstrap\"; //form과 button component만을 import해서 사용한다\n\nimport axios from \"axios\"; //비동기 통신\n\nimport $ from \"jquery\";\nimport \"jquery.cookie\"; //로그인처리와 로그아웃 처리를 위해 쿠키를 활용함\n//쿠키 값이 있다는 것은 이미 로그인 처리가 되어있는 것이고, 쿠키값이 없다는 것은 로그인이 안되어 있다는 것\n\naxios.defaults.withCredentials = true; //다른 서버에서 데이터를 가져오기 위해 사용. 동일 기원이 아님에도 데이터 통신 가능케 함\n\nconst headers = {\n  withCredentials: true\n};\n\nclass LoginForm extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.join = () => {\n      //파\n      const joinEmail = this.joinEmail.value;\n      const joinName = this.joinName.value;\n      const joinPw = this.joinPw.value;\n      const regExp = /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i; //js문법의 정규표현식으로, 이메일 주소를 추출하기 위한 방법이다.\n\n      const regExp2 = /^(?=.*[a-zA-Z])(?=.*[!@#$%^*+=-])(?=.*[0-9]).{8,16}$/;\n\n      if (joinEmail === \"\" || joinEmail === undefined) {\n        alert(\"이메일 주소를 입력해주세요.\");\n        this.joinEmail.focus();\n        return;\n      } else if (joinEmail.match(regExp) === null || joinEmail.match(regExp) === undefined) {\n        alert(\"이메일 형식에 맞게 입력해주세요.\");\n        this.joinEmail.value = \"\";\n        this.joinEmail.focus();\n        return;\n      } else if (joinName === \"\" || joinName === undefined) {\n        alert(\"이름을 입력해주세요.\");\n        this.joinName.focus();\n        return;\n      } else if (joinPw === \"\" || joinPw === undefined) {\n        alert(\"비밀번호를 입력해주세요.\");\n        this.joinPw.focus();\n        return;\n      } else if (joinPw.match(regExp2) === null || joinPw.match(regExp2) === undefined) {\n        alert(\"비밀번호를 숫자와 문자, 특수문자 포함 8~16자리로 입력해주세요.\");\n        this.joinPw.value = \"\";\n        this.joinPw.focus();\n        return;\n      } //파라미터를 모아놓은 변수. 이들을 서버에 전송하게 된다. headers는 다른 서버와의 통신을 위해 넘겨주어야 하는 것\n\n\n      const send_param = {\n        //key와 value의 조합\n        headers,\n        email: this.joinEmail.value,\n        //프론트에 입력한 이메일 값\n        name: this.joinName.value,\n        //프론트에 입력한 이름\n        password: this.joinPw.value //프론트에 입력한 비밀번호 값\n\n      };\n      axios //axios를 이용한 통신\n      .post(\"http://localhost:8080/member/join\", send_param) //send_param을 local 8080번에 전송, 페이지 전송 없이 비동기적 기능\n      //정상 수행\n      .then(returnData => {\n        if (returnData.data.message) {\n          alert(returnData.data.message); //이메일 중복 체크\n\n          if (returnData.data.dupYn === \"1\") {\n            this.joinEmail.value = \"\";\n            this.joinEmail.focus();\n          } else {\n            this.joinEmail.value = \"\";\n            this.joinName.value = \"\";\n            this.joinPw.value = \"\";\n          }\n        } else {\n          alert(\"회원가입 실패\");\n        }\n      }) //에러\n      .catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.login = () => {\n      //로그인 함수\n      const loginEmail = this.loginEmail.value;\n      const loginPw = this.loginPw.value;\n\n      if (loginEmail === \"\" || loginEmail === undefined) {\n        alert(\"이메일 주소를 입력해주세요.\");\n        this.loginEmail.focus();\n        return;\n      } else if (loginPw === \"\" || loginPw === undefined) {\n        alert(\"비밀번호를 입력해주세요.\");\n        this.loginPw.focus();\n        return;\n      }\n\n      const send_param = {\n        headers,\n        email: this.loginEmail.value,\n        password: this.loginPw.value\n      };\n      axios.post(\"http://localhost:8080/member/login\", send_param) //서버에 member/login이라는 url 정보를 전송해줌\n      //정상 수행\n      .then(returnData => {\n        if (returnData.data.message) {\n          // console.log(\"login_id:\" + returnData.data._id);\n          $.cookie(\"login_id\", returnData.data._id, {\n            expires: 1\n          }); //서버에 연동이 성공하면, 받아온 데이터의 id를 login-id쿠키로 쓴다.\n\n          $.cookie(\"login_email\", returnData.data.email, {\n            expires: 1\n          });\n          alert(returnData.data.message); //로그인되면 메시지 띄워줌\n\n          window.location.reload(); //페이지가 정적이게 가만히 있으면 로그인을 한다한들 페이지가 넘어가지 않음\n        } else {\n          alert(returnData.data.message); //로그인 실패시 출력할 메시지를 입력하면 될 것\n        }\n      }) //에러\n      .catch(err => {\n        console.log(err);\n      });\n    };\n  }\n\n  render() {\n    const formStyle = {\n      margin: 50\n    };\n    const buttonStyle = {\n      marginTop: 10\n    }; //렌더 안에서 스타일을 적용하는 이유는 외부에서 자바스크립트 문법을 사용하기 위함\n\n    return /*#__PURE__*/React.createElement(Form, {\n      style: formStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      controlId: \"joinForm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }\n    }, \"Email address\"), /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"email\",\n      maxLength: \"100\",\n      ref: ref => this.joinEmail = ref //react에서 아이디를 부여하는 방법이라고 배움. 여기서 받은 아이디를 서버로 넘기게 됨\n      ,\n      placeholder: \"Enter email\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Form.Text, {\n      className: \"text-muted\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }\n    }, \"\\uC791\\uC131\\uD574\\uC8FC\\uC2E0 \\uC774\\uBA54\\uC77C \\uC8FC\\uC18C\\uB294 \\uC678\\uBD80\\uC5D0 \\uC720\\uCD9C\\uB418\\uC9C0 \\uC54A\\uC2B5\\uB2C8\\uB2E4.\"), /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }\n    }, \"name\"), /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"text\",\n      maxLength: \"20\",\n      ref: ref => this.joinName = ref,\n      placeholder: \"name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }\n    }, \"Password\"), /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"password\",\n      maxLength: \"64\",\n      ref: ref => this.joinPw = ref,\n      placeholder: \"Password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      style: buttonStyle,\n      onClick: this.join //로그인 폼 클래스 내부의 join함수를 클릭할 때마다 실행\n      ,\n      variant: \"primary\" //bootstrap 문법.\n      ,\n      type: \"button\",\n      block: true //block은 화면 끝까지 디자인을 채우는 것\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }\n    }, \"\\uD68C\\uC6D0\\uAC00\\uC785\")), /*#__PURE__*/React.createElement(Form.Group, {\n      controlId: \"loginForm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }\n    }, \"Email address\"), /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"email\",\n      maxLength: \"100\",\n      ref: ref => this.loginEmail = ref,\n      placeholder: \"Enter email\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }\n    }, \"Password\"), /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"password\",\n      maxLength: \"20\",\n      ref: ref => this.loginPw = ref,\n      placeholder: \"Password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      style: buttonStyle,\n      onClick: this.login,\n      variant: \"primary\",\n      type: \"button\",\n      block: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }\n    }, \"\\uB85C\\uADF8\\uC778\")));\n  }\n\n}\n\nexport default LoginForm;","map":{"version":3,"sources":["C:/Users/이종혁/Pictures/Desktop/web back/forum/forum-front/src/LoginForm.js"],"names":["React","Component","Form","Button","axios","$","defaults","withCredentials","headers","LoginForm","join","joinEmail","value","joinName","joinPw","regExp","regExp2","undefined","alert","focus","match","send_param","email","name","password","post","then","returnData","data","message","dupYn","catch","err","console","log","login","loginEmail","loginPw","cookie","_id","expires","window","location","reload","render","formStyle","margin","buttonStyle","marginTop","ref"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\n//form과 button component만을 import해서 사용한다\r\nimport axios from \"axios\";\r\n//비동기 통신\r\nimport $ from \"jquery\";\r\nimport {} from \"jquery.cookie\";\r\n//로그인처리와 로그아웃 처리를 위해 쿠키를 활용함\r\n//쿠키 값이 있다는 것은 이미 로그인 처리가 되어있는 것이고, 쿠키값이 없다는 것은 로그인이 안되어 있다는 것\r\naxios.defaults.withCredentials = true; //다른 서버에서 데이터를 가져오기 위해 사용. 동일 기원이 아님에도 데이터 통신 가능케 함\r\nconst headers = { withCredentials: true };\r\n\r\nclass LoginForm extends Component {\r\n\r\n  join = () => { //파\r\n    const joinEmail = this.joinEmail.value;\r\n    const joinName = this.joinName.value;\r\n    const joinPw = this.joinPw.value;\r\n    const regExp = /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i;\r\n    //js문법의 정규표현식으로, 이메일 주소를 추출하기 위한 방법이다.\r\n    const regExp2 = /^(?=.*[a-zA-Z])(?=.*[!@#$%^*+=-])(?=.*[0-9]).{8,16}$/;\r\n    if (joinEmail === \"\" || joinEmail === undefined) {\r\n      alert(\"이메일 주소를 입력해주세요.\");\r\n      this.joinEmail.focus();\r\n      return;\r\n    } else if (\r\n      joinEmail.match(regExp) === null ||\r\n      joinEmail.match(regExp) === undefined\r\n    ) {\r\n      alert(\"이메일 형식에 맞게 입력해주세요.\");\r\n      this.joinEmail.value = \"\";\r\n      this.joinEmail.focus();\r\n      return;\r\n    } else if (joinName === \"\" || joinName === undefined) {\r\n      alert(\"이름을 입력해주세요.\");\r\n      this.joinName.focus();\r\n      return;\r\n    } else if (joinPw === \"\" || joinPw === undefined) {\r\n      alert(\"비밀번호를 입력해주세요.\");\r\n      this.joinPw.focus();\r\n      return;\r\n    } else if (\r\n      joinPw.match(regExp2) === null ||\r\n      joinPw.match(regExp2) === undefined\r\n    ) {\r\n      alert(\"비밀번호를 숫자와 문자, 특수문자 포함 8~16자리로 입력해주세요.\");\r\n      this.joinPw.value = \"\";\r\n      this.joinPw.focus();\r\n      return;\r\n    }\r\n    //파라미터를 모아놓은 변수. 이들을 서버에 전송하게 된다. headers는 다른 서버와의 통신을 위해 넘겨주어야 하는 것\r\n    const send_param = { //key와 value의 조합\r\n      headers,\r\n      email: this.joinEmail.value,//프론트에 입력한 이메일 값\r\n      name: this.joinName.value,//프론트에 입력한 이름\r\n      password: this.joinPw.value//프론트에 입력한 비밀번호 값\r\n    };\r\n    axios //axios를 이용한 통신\r\n      .post(\"http://localhost:8080/member/join\", send_param) //send_param을 local 8080번에 전송, 페이지 전송 없이 비동기적 기능\r\n      //정상 수행\r\n      .then(returnData => {\r\n        if (returnData.data.message) {\r\n          alert(returnData.data.message);\r\n          //이메일 중복 체크\r\n          if (returnData.data.dupYn === \"1\") {\r\n            this.joinEmail.value = \"\";\r\n            this.joinEmail.focus();\r\n          } else {\r\n            this.joinEmail.value = \"\";\r\n            this.joinName.value = \"\";\r\n            this.joinPw.value = \"\";\r\n          }\r\n        } else {\r\n          alert(\"회원가입 실패\");\r\n        }\r\n      })\r\n      //에러\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  };\r\n  login = () => {//로그인 함수\r\n    const loginEmail = this.loginEmail.value;\r\n    const loginPw = this.loginPw.value;\r\n\r\n    if (loginEmail === \"\" || loginEmail === undefined) {\r\n      alert(\"이메일 주소를 입력해주세요.\");\r\n      this.loginEmail.focus();\r\n      return;\r\n    } else if (loginPw === \"\" || loginPw === undefined) {\r\n      alert(\"비밀번호를 입력해주세요.\");\r\n      this.loginPw.focus();\r\n      return;\r\n    }\r\n\r\n    const send_param = {\r\n      headers,\r\n      email: this.loginEmail.value,\r\n      password: this.loginPw.value\r\n    };\r\n    axios\r\n      .post(\"http://localhost:8080/member/login\", send_param)//서버에 member/login이라는 url 정보를 전송해줌\r\n      //정상 수행\r\n      .then(returnData => {\r\n        if (returnData.data.message) {\r\n          // console.log(\"login_id:\" + returnData.data._id);\r\n          $.cookie(\"login_id\", returnData.data._id, { expires: 1 });//서버에 연동이 성공하면, 받아온 데이터의 id를 login-id쿠키로 쓴다.\r\n          $.cookie(\"login_email\", returnData.data.email, { expires: 1 });\r\n          alert(returnData.data.message);//로그인되면 메시지 띄워줌\r\n          window.location.reload();//페이지가 정적이게 가만히 있으면 로그인을 한다한들 페이지가 넘어가지 않음\r\n        } else {\r\n          alert(returnData.data.message);//로그인 실패시 출력할 메시지를 입력하면 될 것\r\n        }\r\n      })\r\n      //에러\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  };\r\n  render() {\r\n    const formStyle = {\r\n      margin: 50\r\n    };\r\n    const buttonStyle = {\r\n      marginTop: 10\r\n    };//렌더 안에서 스타일을 적용하는 이유는 외부에서 자바스크립트 문법을 사용하기 위함\r\n    return (\r\n      <Form style={formStyle}>\r\n        <Form.Group controlId=\"joinForm\">\r\n          <Form.Label>Email address</Form.Label>\r\n          <Form.Control\r\n            type=\"email\"\r\n            maxLength=\"100\"\r\n            ref={ref => (this.joinEmail = ref)}\r\n            //react에서 아이디를 부여하는 방법이라고 배움. 여기서 받은 아이디를 서버로 넘기게 됨\r\n            placeholder=\"Enter email\"\r\n          />\r\n          <Form.Text className=\"text-muted\">\r\n            작성해주신 이메일 주소는 외부에 유출되지 않습니다.\r\n          </Form.Text>\r\n          <Form.Label>name</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            maxLength=\"20\"\r\n            ref={ref => (this.joinName = ref)}\r\n            placeholder=\"name\"\r\n          />\r\n          <Form.Label>Password</Form.Label>\r\n          <Form.Control\r\n            type=\"password\"\r\n            maxLength=\"64\"\r\n            ref={ref => (this.joinPw = ref)}\r\n            placeholder=\"Password\"\r\n          />\r\n          <Button\r\n            style={buttonStyle}\r\n            onClick={this.join} //로그인 폼 클래스 내부의 join함수를 클릭할 때마다 실행\r\n            variant=\"primary\" //bootstrap 문법.\r\n            type=\"button\"\r\n            block //block은 화면 끝까지 디자인을 채우는 것\r\n          >\r\n            회원가입\r\n          </Button>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"loginForm\">\r\n          <Form.Label>Email address</Form.Label>\r\n          <Form.Control\r\n            type=\"email\"\r\n            maxLength=\"100\"\r\n            ref={ref => (this.loginEmail = ref)}\r\n            placeholder=\"Enter email\"\r\n          />\r\n          <Form.Label>Password</Form.Label>\r\n          <Form.Control\r\n            type=\"password\"\r\n            maxLength=\"20\"\r\n            ref={ref => (this.loginPw = ref)}\r\n            placeholder=\"Password\"\r\n          />\r\n          <Button\r\n            style={buttonStyle}\r\n            onClick={this.login}\r\n            variant=\"primary\"\r\n            type=\"button\"\r\n            block\r\n          >\r\n            로그인\r\n          </Button>\r\n        </Form.Group>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoginForm;\r\n"]},"metadata":{},"sourceType":"module"}