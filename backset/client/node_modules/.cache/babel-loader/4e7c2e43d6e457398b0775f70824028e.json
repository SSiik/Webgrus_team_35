{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\uC9C4\\uB610\\\\Documents\\\\GitHub\\\\Webgrus_team_35\\\\backset\\\\client\\\\src\\\\BoardDetail.js\";\nimport React, { Component } from \"react\";\nimport { Table, Button } from \"react-bootstrap\";\nimport { NavLink } from \"react-router-dom\";\nimport axios from \"axios\";\naxios.defaults.withCredentials = true;\nconst headers = {\n  withCredentials: true\n};\n\nclass BoardDetail extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      board: []\n    };\n\n    this.deleteBoard = _id => {\n      //아래의 삭제문 코드에서 이어짐\n      const send_param = {\n        headers,\n        _id\n      };\n\n      if (window.confirm(\"정말 삭제하시겠습니까?\")) {\n        axios.post(\"http://localhost:8080/board/delete\", send_param) //server board -> boardrouter -> delete\n        //정상 수행\n        .then(returnData => {\n          alert(\"게시글이 삭제 되었습니다.\");\n          window.location.href = \"/\";\n        }) //에러\n        .catch(err => {\n          console.log(err);\n          alert(\"글 삭제 실패\");\n        });\n      }\n    };\n\n    this.getDetail = () => {\n      const send_param = {\n        headers,\n        _id: this.props.location.query._id\n      };\n      const marginBottom = {\n        marginBottom: 5\n      };\n      axios.post(\"http://localhost:8080/board/detail\", send_param) //getDetail함수로부터 서버측의 boardRouter에서 response를 성공적으로 받으면\n      .then(returnData => {\n        if (returnData.data.board[0]) {\n          const board =\n          /*#__PURE__*/\n          //여기서부터는 프론트단. 테이블의 디자인은 자유\n          React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(Table, {\n            striped: true,\n            bordered: true,\n            hover: true,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(\"thead\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"tr\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 19\n            }\n          }, /*#__PURE__*/React.createElement(\"th\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 21\n            }\n          }, returnData.data.board[0].title), \" \")), /*#__PURE__*/React.createElement(\"tbody\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"tr\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 19\n            }\n          }, /*#__PURE__*/React.createElement(\"td\", {\n            dangerouslySetInnerHTML: {\n              __html: returnData.data.board[0].content\n            } //html을 태그 사이에 그대로 적용하는 것은 허용이 안될 수도 있으므로 이와 같은 메소드 사용\n            ,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 21\n            }\n          })))), /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(NavLink, {\n            to: {\n              pathname: \"/boardWrite\",\n              query: {\n                title: returnData.data.board[0].title,\n                content: returnData.data.board[0].content,\n                _id: this.props.location.query._id\n              } //수정시 다시 전송해줄 데이터들이다. \n\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(Button, {\n            block: true,\n            style: marginBottom,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 19\n            }\n          }, \"\\uAE00 \\uC218\\uC815\")), /*#__PURE__*/React.createElement(Button, {\n            block: true,\n            onClick: this.deleteBoard.bind( //delete board라는 메소드 호출\n            null, this.props.location.query._id),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 17\n            }\n          }, \"\\uAE00 \\uC0AD\\uC81C\")));\n          this.setState({\n            board: board\n          });\n        } else {\n          alert(\"글 상세 조회 실패\");\n        }\n      }) //에러\n      .catch(err => {\n        console.log(err);\n      });\n    };\n  }\n\n  componentDidMount() {\n    //리액트의 생명주기에서 렌더링이 완료되면 실행되는 함수. 밑에 작성한 getDetail함수로부터 this.props.location.query값인 _id를 받아오는데, 이를 이용해 로그인 되어있는지를 확인할 수 있다.\n    if (this.props.location.query !== undefined) {\n      //location.query는 getDetail함수에서 id로부터 상세한 정보를 가져오기 위해 이용되는 것\n      this.getDetail(); //로그인이 되어있다면 getDetail함수 호출\n    } else {\n      window.location.href = \"/\"; //로그인이 풀려있다면 메인페이지로 돌리기\n    }\n  }\n\n  //onClick={this.getBoard.bind(null,this.props._id)}\n  render() {\n    const divStyle = {\n      margin: 50\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: divStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 12\n      }\n    }, this.state.board);\n  }\n\n}\n\nexport default BoardDetail;","map":{"version":3,"sources":["C:/Users/진또/Documents/GitHub/Webgrus_team_35/backset/client/src/BoardDetail.js"],"names":["React","Component","Table","Button","NavLink","axios","defaults","withCredentials","headers","BoardDetail","state","board","deleteBoard","_id","send_param","window","confirm","post","then","returnData","alert","location","href","catch","err","console","log","getDetail","props","query","marginBottom","data","title","__html","content","pathname","bind","setState","componentDidMount","undefined","render","divStyle","margin"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Table, Button } from \"react-bootstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\naxios.defaults.withCredentials = true;\r\nconst headers = { withCredentials: true };\r\n\r\nclass BoardDetail extends Component {\r\n  state = {\r\n    board: []\r\n  };\r\n\r\n  componentDidMount() {//리액트의 생명주기에서 렌더링이 완료되면 실행되는 함수. 밑에 작성한 getDetail함수로부터 this.props.location.query값인 _id를 받아오는데, 이를 이용해 로그인 되어있는지를 확인할 수 있다.\r\n    if (this.props.location.query !== undefined) {//location.query는 getDetail함수에서 id로부터 상세한 정보를 가져오기 위해 이용되는 것\r\n      this.getDetail();//로그인이 되어있다면 getDetail함수 호출\r\n    } else {\r\n      window.location.href = \"/\";//로그인이 풀려있다면 메인페이지로 돌리기\r\n    }\r\n  }\r\n\r\n  deleteBoard = _id => {//아래의 삭제문 코드에서 이어짐\r\n    const send_param = {\r\n      headers,\r\n      _id\r\n    };\r\n    if (window.confirm(\"정말 삭제하시겠습니까?\")) {\r\n      axios\r\n        .post(\"http://localhost:8080/board/delete\", send_param)//server board -> boardrouter -> delete\r\n        //정상 수행\r\n        .then(returnData => {\r\n          alert(\"게시글이 삭제 되었습니다.\");\r\n          window.location.href = \"/\";\r\n        })\r\n        //에러\r\n        .catch(err => {\r\n          console.log(err);\r\n          alert(\"글 삭제 실패\");\r\n        });\r\n    }\r\n  };\r\n\r\n  getDetail = () => {\r\n    const send_param = {\r\n      headers,\r\n      _id: this.props.location.query._id\r\n    };\r\n    const marginBottom = {\r\n      marginBottom: 5\r\n    };\r\n    axios\r\n      .post(\"http://localhost:8080/board/detail\", send_param)\r\n      //getDetail함수로부터 서버측의 boardRouter에서 response를 성공적으로 받으면\r\n      .then(returnData => {\r\n        if (returnData.data.board[0]) {\r\n          const board = ( //여기서부터는 프론트단. 테이블의 디자인은 자유\r\n            <div>\r\n              <Table striped bordered hover>\r\n                <thead>\r\n                  <tr>\r\n                    <th>{returnData.data.board[0].title}</th> {/*서버단의 board로부터 받은 json파일을 js문법으로 적용 */}\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr>\r\n                    <td\r\n                      dangerouslySetInnerHTML={{\r\n                        __html: returnData.data.board[0].content\r\n                      }}//html을 태그 사이에 그대로 적용하는 것은 허용이 안될 수도 있으므로 이와 같은 메소드 사용\r\n                    ></td>\r\n                  </tr>\r\n                </tbody>\r\n              </Table>\r\n              <div>\r\n                <NavLink\r\n                  to={{\r\n                    pathname: \"/boardWrite\",\r\n                    query: {\r\n                      title: returnData.data.board[0].title,\r\n                      content: returnData.data.board[0].content,\r\n                      _id: this.props.location.query._id\r\n                    }//수정시 다시 전송해줄 데이터들이다. \r\n                  }}\r\n                >\r\n                  <Button block style={marginBottom}>\r\n                    글 수정\r\n                  </Button>\r\n                </NavLink>\r\n                <Button\r\n                  block\r\n                  onClick={this.deleteBoard.bind(//delete board라는 메소드 호출\r\n                    null,\r\n                    this.props.location.query._id\r\n                  )}\r\n                >\r\n                  글 삭제\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          );\r\n          this.setState({\r\n            board: board\r\n          });\r\n        } else {\r\n          alert(\"글 상세 조회 실패\");\r\n        }\r\n      })\r\n      //에러\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  //onClick={this.getBoard.bind(null,this.props._id)}\r\n  render() {\r\n    const divStyle = {\r\n      margin: 50\r\n    };\r\n    return <div style={divStyle}>{this.state.board}</div>;\r\n  }\r\n}\r\n\r\nexport default BoardDetail;\r\n"]},"metadata":{},"sourceType":"module"}